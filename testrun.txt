bash: usr/share/doc/bash-doc/examples: No such file or directory
(base) ian@ian-Latitude-E7440:~$ cat drought.py
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# Load the data
data = pd.read_csv('path_to_your_data.csv')

# Preprocess the data
# (e.g., handling missing values, feature scaling, etc.)

# Select relevant features
X = data[['rainfall', 'temperature', 'humidity']]  # Example features
y = data['drought_status']  # Target variable

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the model
model = RandomForestClassifier()
model.fit(X_train, y_train)

# Make predictions
predictions = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, predictions)
print(f"Model Accuracy: {accuracy}")

# Use the model for forecasting
# forecast = model.predict(new_data)
(base) ian@ian-Latitude-E7440:~$ nano drought.py
(base) ian@ian-Latitude-E7440:~$ python3 drought.py
Model Accuracy: 0.5
(base) ian@ian-Latitude-E7440:~$ cat drought.py
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# Load the data
data = pd.read_csv('drought_forecast_data.csv')

# Preprocess the data
# (e.g., handling missing values, feature scaling, etc.)

# Select relevant features
X = data[['rainfall', 'temperature', 'humidity']]  # Example features
y = data['drought_status']  # Target variable

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the model
model = RandomForestClassifier()
model.fit(X_train, y_train)

# Make predictions
predictions = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, predictions)
print(f"Model Accuracy: {accuracy}")

# Use the model for forecasting
# forecast = model.predict(new_data)
(base) ian@ian-Latitude-E7440:~$ cat drought_forecast_data.csv
date,rainfall,temperature,humidity,drought_status
2020-01-01,54.88135039273247,30.167248051943453,48.707752919646154,0
2020-01-02,71.51893663724195,24.05011959788247,71.78060932892757,0
2020-01-03,60.276337607164386,31.027910331838925,52.665110357548855,1
2020-01-04,54.48831829968969,34.432828176761575,40.776220653578086,1
2020-01-05,42.36547993389047,23.73129715279937,31.480723703479875,1
2020-01-06,64.58941130666561,28.642360016267553,34.034977887794916,1
2020-01-07,43.75872112626925,28.880628969077584,70.76356640991403,0
2020-01-08,89.17730007820798,28.5837785868631,57.22181067336272,0
2020-01-09,96.36627605010293,23.346224489609273,62.19475266652333,1
2020-01-10,38.34415188257777,34.291235172754774,83.80027758242053,0
2020-01-11,79.17250380826646,26.70688067926441,89.42033684380226,1
2020-01-12,52.88949197529045,32.69613008706692,43.013819063908436,1
2020-01-13,56.80445610939323,30.492189129762565,69.78469218600605,1
2020-01-14,92.5596638292661,24.461554262827004,45.79934260422904,1
2020-01-15,7.103605819788694,32.206967295537154,31.23905996794372,0
2020-01-16,8.712929970154072,25.94758611270477,75.50271923016848,0
2020-01-17,2.021839744032572,33.216547956667426,49.20102904934807,1
2020-01-18,83.2619845547938,28.71909308953788,53.00783365031388,0
2020-01-19,77.81567509498505,33.22603042782279,65.29902681321634,0
2020-01-20,87.00121482468191,30.38797385116649,79.86290731417142,1
2020-01-21,97.8618342232764,30.87881419729461,67.73891061546892,1
2020-01-22,79.91585642167236,27.519865728900534,82.35903932684371,1
2020-01-23,46.147936225293186,34.34125452084836,46.41252208893815,0
2020-01-24,78.05291762864555,29.659852988444563,77.88281003475382,0
2020-01-25,11.827442586893323,26.357825728372696,41.13815665835713,0
2020-01-26,63.99210213275238,29.095898211918865,87.16749941831668,1
2020-01-27,14.33532874090464,20.287897974640003,71.24929658326892,1
2020-01-28,94.46689170495839,24.52362225011824,42.930460626813506,0
2020-01-29,52.184832175007166,29.902603062390277,86.84223542933546,1
2020-01-30,41.46619399905236,24.35116410815666,73.85134840620947,0
2020-01-31,26.455561210462697,29.270231434982623,45.23649855570155,0
2020-02-01,77.42336894342166,26.43153051418649,42.79871864204892,0
2020-02-02,45.615033221654855,22.032110963336752,61.09204283583979,1
2020-02-03,56.84339488686485,24.47423488934046,31.539763083271893,1
2020-02-04,1.8789800436355142,28.549473660518974,42.44820452646657,0
2020-02-05,61.76354970758771,28.863091418722597,55.48112812509038,1
2020-02-06,61.20957227224214,28.614878732743684,52.45019882005353,0
2020-02-07,61.69339968747569,29.798012297857007,57.81452546188864,1
2020-02-08,94.37480785146242,29.781549050025333,46.65772237768391,0
2020-02-09,68.18202991034835,26.47127653150961,65.20706078749012,0
2020-02-10,35.9507900573786,33.448198937765945,81.83133635539389,1
2020-02-11,43.703195379934144,25.51342805071845,37.051911357721984,0
2020-02-12,69.76311959272648,26.537973878984403,61.04274642924685,0
2020-02-13,6.022547162926983,33.37885032523508,37.9240863807092,0
2020-02-14,66.67667154456677,32.09290983569129,73.01158087155562,0
2020-02-15,67.06378696181594,30.558328753105496,53.76358216843762,0
2020-02-16,21.03825610738409,21.503403309684515,63.925278711510536,1
2020-02-17,12.892629765485331,33.7922392061701,40.99679017284472,1
2020-02-18,31.542835092418386,30.71361949323667,38.69086556060263,1
2020-02-19,36.37107709426226,34.982705098518,59.28337683893727,1
2020-02-20,57.019677041787965,22.241724569869906,51.336764270997335,1
2020-02-21,43.86015134623204,33.021890860523214,86.42591671516878,1
2020-02-22,98.83738380592261,22.43739402014562,75.91951522841791,1
2020-02-23,10.204481074802807,29.233393464257663,74.91981719103285,1
2020-02-24,20.88767560948347,21.857299742741624,84.22318438475601,0
2020-02-25,16.130951788499626,32.720123439833515,35.00534612652111,0
2020-02-26,65.31083254653984,32.10978438087516,63.13154819534439,0
2020-02-27,25.329160253978213,28.536511079218897,65.06856413734613,0
2020-02-28,46.63107728563063,26.107749458389996,87.71618271283374,1
2020-02-29,24.442559200160275,21.037504931827073,47.52885160755293,1
2020-03-01,15.896958364551972,30.461431597168456,44.44972679492681,1
2020-03-02,11.037514116430513,26.803140240171032,36.01763653592987,1
2020-03-03,65.63295894652734,30.83083399205522,30.98577777548845,0
2020-03-04,13.81829513486138,32.995734888929434,85.77175900753143,1
2020-03-05,19.65823616800535,34.632822575043285,70.1949927954546,0
2020-03-06,36.872517066096414,32.837050135889164,77.10917472138826,0
2020-03-07,82.09932298479352,20.175711262775028,46.903806345236944,1
2020-03-08,9.710127579306127,25.39967096717546,65.18460997117961,1
2020-03-09,83.7944907498804,30.94985843636087,33.83731596725887,1
2020-03-10,9.609840789396307,22.57444515892161,59.13765575607738,0
2020-03-11,97.64594650133958,27.81554909306194,88.64970838466681,1
2020-03-12,46.86512016477016,20.815069825088806,82.59031471899544,1
2020-03-13,97.67610881903371,22.999947873446,50.28953711021074,1
2020-03-14,60.4845519745046,20.27782691690921,87.69420927248991,0
2020-03-15,73.92635793983017,31.90546555036131,43.90209758827227,1
2020-03-16,3.9187792254320675,23.3588703209057,86.95912934494089,1
2020-03-17,28.280696257640958,25.18027521045354,86.48266228238992,1
2020-03-18,12.01965612131689,33.92121940198386,77.9521552411435,1
2020-03-19,29.614019752214492,30.566216028852992,67.82687621200748,1
2020-03-20,11.872771895424405,20.477583942969616,82.45727799749682,0
2020-03-21,31.798317939397602,22.47041234746869,47.5812170704678,0
2020-03-22,41.426299451466996,29.322176022496453,80.9366133187751,1
2020-03-23,6.4147496348784365,28.658428829062515,67.07260151505143,0
2020-03-24,69.24721193700198,23.56839232061763,30.79421146553397,0
2020-03-25,56.660145420657514,34.013209968871905,50.83401107593318,0
2020-03-26,26.53894909394454,29.209489339488442,38.8884516568899,1
2020-03-27,52.32480534666997,28.034492045374375,88.90976338909519,0
2020-03-28,9.394051075844168,28.848649645318567,58.702218422399284,1
2020-03-29,57.59464955561793,30.951830442751543,59.84348192991976,0
2020-03-30,92.92961975762141,24.67917493219403,68.36835098392342,1
2020-03-31,31.856895245132367,25.973315933241377,52.11507636777705,0
2020-04-01,66.74103799636816,23.147656234626833,38.214016301135935,1
2020-04-02,13.179786240439217,22.792895088205043,79.32706399165474,1
2020-04-03,71.63272041185655,34.165585849759005,41.39087471416548,0
2020-04-04,28.94060929472011,31.093261925739313,60.67913895278736,1
2020-04-05,18.319136200711682,27.356882129263507,43.45902173848435,0
2020-04-06,58.65129348100832,23.41121941959985,35.87066906964204,0
2020-04-07,2.0107546187493552,23.815347226555893,81.731491045301,0
2020-04-08,82.89400292173632,20.870437404858134,88.37516934138782,1
2020-04-09,0.46954761925470656,26.51624938337181,87.65007948378002,0
(base) ian@ian-Latitude-E7440:~$ ls drodata.py
drodata.py
(base) ian@ian-Latitude-E7440:~$ cat drodata.py
import pandas as pd
import numpy as np

# Creating a sample dataset
np.random.seed(0)
data = {
    "date": pd.date_range(start="2020-01-01", periods=100, freq='D'),
    "rainfall": np.random.uniform(0, 100, 100),  # Random values between 0 and 100
    "temperature": np.random.uniform(20, 35, 100),  # Random values between 20°C and 35°C
    "humidity": np.random.uniform(30, 90, 100),  # Random values between 30% and 90%
    "drought_status": np.random.choice([0, 1], 100)  # 0 for no drought, 1 for drought
}

df = pd.DataFrame(data)

# Saving the DataFrame to a CSV file
csv_file = 'drought_forecast_data.csv'
df.to_csv(csv_file, index=False)

csv_file
(base) ian@ian-Latitude-E7440:~$ sloccount drought.py
Have a non-directory at the top, so creating directory top_dir
Adding /home/ian/drought.py to top_dir
Categorizing files.
Finding a working MD5 command....
Found a working MD5 command.
Computing results.


SLOC	Directory	SLOC-by-Language (Sorted)
13      top_dir         python=13


Totals grouped by language (dominant language first):
python:          13 (100.00%)




Total Physical Source Lines of Code (SLOC)                = 13
Development Effort Estimate, Person-Years (Person-Months) = 0.00 (0.03)
 (Basic COCOMO model, Person-Months = 2.4 * (KSLOC**1.05))
Schedule Estimate, Years (Months)                         = 0.05 (0.62)
 (Basic COCOMO model, Months = 2.5 * (person-months**0.38))
Estimated Average Number of Developers (Effort/Schedule)  = 0.04
Total Estimated Cost to Develop                           = $ 283
 (average salary = $56,286/year, overhead = 2.40).
SLOCCount, Copyright (C) 2001-2004 David A. Wheeler
SLOCCount is Open Source Software/Free Software, licensed under the GNU GPL.
SLOCCount comes with ABSOLUTELY NO WARRANTY, and you are welcome to
redistribute it under certain conditions as specified by the GNU GPL license;
see the documentation for details.
Please credit this data as "generated using David A. Wheeler's 'SLOCCount'."
(base) ian@ian-Latitude-E7440:~$ sloccount drodata.py
Have a non-directory at the top, so creating directory top_dir
Adding /home/ian/drodata.py to top_dir
Categorizing files.
Finding a working MD5 command....
Found a working MD5 command.
Computing results.


SLOC	Directory	SLOC-by-Language (Sorted)
14      top_dir         python=14


Totals grouped by language (dominant language first):
python:          14 (100.00%)




Total Physical Source Lines of Code (SLOC)                = 14
Development Effort Estimate, Person-Years (Person-Months) = 0.00 (0.03)
 (Basic COCOMO model, Person-Months = 2.4 * (KSLOC**1.05))
Schedule Estimate, Years (Months)                         = 0.05 (0.63)
 (Basic COCOMO model, Months = 2.5 * (person-months**0.38))
Estimated Average Number of Developers (Effort/Schedule)  = 0.04
Total Estimated Cost to Develop                           = $ 306
 (average salary = $56,286/year, overhead = 2.40).
SLOCCount, Copyright (C) 2001-2004 David A. Wheeler
SLOCCount is Open Source Software/Free Software, licensed under the GNU GPL.
SLOCCount comes with ABSOLUTELY NO WARRANTY, and you are welcome to
redistribute it under certain conditions as specified by the GNU GPL license;
see the documentation for details.
Please credit this data as "generated using David A. Wheeler's 'SLOCCount'."
(base) ian@ian-Latitude-E7440:~$ 
